//----------------------------------------
// The code is automatically generated by the generate-tool.
// Copyright © yanghy. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import (
	. "github.com/energye/lcl/api"
	"github.com/energye/lcl/api/imports"
	"unsafe"
)

// IUnknown 底层接口
type IUnknown interface {
	Instance() uintptr
	UnsafeAddr() unsafe.Pointer
	IsValid() bool
	SetInstance(instance unsafe.Pointer)
	AddRef() bool
	Release() bool
}

// Unknown 接口
type Unknown struct {
	instance unsafe.Pointer
}

func (m *Unknown) Instance() uintptr {
	if m.instance == nil {
		return 0
	}
	return uintptr(m.instance)
}

func (m *Unknown) UnsafeAddr() unsafe.Pointer {
	return m.instance
}

func (m *Unknown) IsValid() bool {
	if m == nil || m.instance == nil {
		return false
	}
	return true
}

func (m *Unknown) SetInstance(instance unsafe.Pointer) {
	m.instance = instance
}

func (m *Unknown) AddRef() bool {
	r1 := unknownImportAPI().SysCallN(0, m.Instance())
	return GoBool(r1)
}

func (m *Unknown) Release() bool {
	if m.IsValid() {
		r1 := unknownImportAPI().SysCallN(1, m.Instance())
		if GoBool(r1) {
			m.instance = nil
			return true
		}
	}
	return false
}

var (
	unknownImport       *imports.Imports = nil
	unknownImportTables                  = []*imports.Table{
		/*0*/ imports.NewTable("COMUnknown_AddRef", 0),
		/*1*/ imports.NewTable("COMUnknown_Release", 0),
	}
)

func unknownImportAPI() *imports.Imports {
	if unknownImport == nil {
		unknownImport = NewDefaultImports()
		unknownImport.SetImportTable(unknownImportTables)
		unknownImportTables = nil
	}
	return unknownImport
}
